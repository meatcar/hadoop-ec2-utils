import sys
import boto
import boto.ec2
import json
import pysftp

class ClusterLauncher(object):
    group_name = u'allspark'
    key_pair_name = u'hadoopKey2'

    def __init__(self, cluster_name='allspark',
                       instance_type='m1.small',
                       hdfs_node_size=8,
                       cluster_size=0,
                       slaves=[],
                       conf_file="conf.json"):

        self.cluster_name = cluster_name
        self.instance_type = instance_type

        with open(conf_file) as conf_json:
            self.conf = json.load(conf_json)

        self.conn = boto.ec2.connect_to_region(
                self.conf['region'],
                aws_access_key_id = self.conf['key'],
                aws_secret_access_key= self.conf['secret_key'])

        self.group = self.get_security_group()
        self.key_pair = self.get_key_pair()

        self.slaves = slaves
        self.slaves = self.get_slaves(cluster_size)
        self.master = self.start_node()
        self.configure_master()

    def cleanup(self):
        for s in self.slaves:
            s.terminate()

        self.conn.close()

    def get_slaves(self, num):
        if len(self.slaves) > 0:
            return self.slaves

        self.slaves = []
        for i in xrange(0, num):
            self.slaves.append(self.start_node(slave=True))

    def get_security_group(self):
        groups = self.conn.get_all_security_groups()
        groups = [g for g in groups if g.name == self.group_name]

        if len(groups) == 1:
            return groups[0]

        group = self.conn.create_security_group(
                self.group_name, 'Hadoop Cluster Group (generated by script)')

        group.authorize('tcp', 22, 22, '0.0.0.0/0') #ssh
        group.authorize('icmp', -1, -1, '0.0.0.0/0') #ssh

        return group

    def get_key_pair(self):
        keys = self.conn.get_all_key_pairs()
        keys = [k for k in keys if k.name == self.key_pair_name]

        if len(keys) == 1:
            return keys[0]

        key_pair = self.conn.create_key_pair(self.key_pair_name)
        return key_pair

    def start_node(self, slave=False):
        reservation = self.conn.run_instances(
                self.conf['ami'],
                instance_type='m1.small',
                key_name=self.key_pair_name,
                security_groups=[self.group_name]
                )

        if len(reservation.instances) != 1:
            print ("Didn't launce exactly one instance!")
            sys.exit(1)

        instance = reservation.instances[0]

        name = self.cluster_name
        if slave:
            name += '-slave'
        else:
            name += '-master'
        instance.add_tag('Name', value=name)

        return instance

    def configure_master(self):

        ssh = pysftp.Connection(
                host=self.master.public_dns_name,
                username="ubuntu",
                private_key=self.key_pair_name + '.pem'
                )

        print ssh

